/* global describe, it, assert */

import ClipperLib from "clipper-lib";
global.ClipperLib = ClipperLib;
ClipperLib.use_xyz = true;

import { UNit } from "./TestSupport.js";
import { UnitConverter } from "../src/UnitConverter.js";
const d = UnitConverter.from.px.to.integer;
let CutPoint, CutPath, CutPaths, Perforate;

describe("Perforate", () => {

  // CutPath depends on ClipperLib
  before(() => {
    return Promise.all([
      import("../src/CutPoint.js"),
      import("../src/CutPath.js"),
      import("../src/CutPaths.js"),
      import("../src/Perforate.js") ])
    .then(mods => {
      CutPoint = mods[0].CutPoint;
      CutPath = mods[1].CutPath;
      CutPaths = mods[2].CutPaths;
      Perforate = mods[3].Perforate;
    });
  });

  it("perforate open path", () => {
    const path = new CutPaths([[
      { X:   0, Y: 0 },
      { X: 100, Y: 0 },
      { X: 100, Y: 100 },
      { X:   0, Y: 100 }
    ]], false);
    const params = {
      cutterDiameter: 2,
      spacing: 19,
      safeZ: 5,
      botZ: -5
    };
    const result = (new Perforate()).generateToolpaths(path, params);
    assert.almost(result, new CutPaths(
      [
        [
          { X: 0, Y: 0, Z: 5 },
          { X: 0, Y: 0, Z: -5 },
          { X: 0, Y: 0, Z: 5 },
          { X: 22.22222222222222, Y: 0, Z: 5 },
          { X: 22.22222222222222, Y: 0, Z: -5 },
          { X: 22.22222222222222, Y: 0, Z: 5 },
          { X: 44.44444444444444, Y: 0, Z: 5 },
          { X: 44.44444444444444, Y: 0, Z: -5 },
          { X: 44.44444444444444, Y: 0, Z: 5 },
          { X: 66.66666666666666, Y: 0, Z: 5 },
          { X: 66.66666666666666, Y: 0, Z: -5 },
          { X: 66.66666666666666, Y: 0, Z: 5 },
          { X: 88.88888888888889, Y: 0, Z: 5 },
          { X: 88.88888888888889, Y: 0, Z: -5 },
          { X: 88.88888888888889, Y: 0, Z: 5 },
          { X: 100, Y: 22.22222222222222, Z: 5 },
          { X: 100, Y: 22.22222222222222, Z: -5 },
          { X: 100, Y: 22.22222222222222, Z: 5 },
          { X: 100, Y: 44.44444444444444, Z: 5 },
          { X: 100, Y: 44.44444444444444, Z: -5 },
          { X: 100, Y: 44.44444444444444, Z: 5 },
          { X: 100, Y: 66.66666666666666, Z: 5 },
          { X: 100, Y: 66.66666666666666, Z: -5 },
          { X: 100, Y: 66.66666666666666, Z: 5 },
          { X: 100, Y: 88.88888888888889, Z: 5 },
          { X: 100, Y: 88.88888888888889, Z: -5 },
          { X: 100, Y: 88.88888888888889, Z: 5 },
          { X: 77.77777777777777, Y: 100, Z: 5 },
          { X: 77.77777777777777, Y: 100, Z: -5 },
          { X: 77.77777777777777, Y: 100, Z: 5 },
          { X: 55.55555555555555, Y: 100, Z: 5 },
          { X: 55.55555555555555, Y: 100, Z: -5 },
          { X: 55.55555555555555, Y: 100, Z: 5 },
          { X: 33.33333333333333, Y: 100, Z: 5 },
          { X: 33.33333333333333, Y: 100, Z: -5 },
          { X: 33.33333333333333, Y: 100, Z: 5 },
          { X: 11.111111111111107, Y: 100, Z: 5 },
          { X: 11.111111111111107, Y: 100, Z: -5 },
          { X: 11.111111111111107, Y: 100, Z: 5 }
        ]
      ],false));
  });

  it("perforate closed path", () => {
    const path = new CutPaths([[
      { X:   0, Y: 0 },
      { X: 100, Y: 0 },
      { X: 100, Y: 100 },
      { X:   0, Y: 100 }
    ]], true);
    const params = {
      cutterDiameter: 2,
      spacing: 18,
      safeZ: 5,
      botZ: -5
    };
    const result = (new Perforate()).generateToolpaths(path, params);
    assert.almost(result, new CutPaths(
      [
        [
          { X: 101, Y: 0, Z: 5 },
          { X: 101, Y: 0, Z: -5 },
          { X: 101, Y: 0, Z: 5 },
          { X: 101, Y: 21.350360749973287, Z: 5 },
          { X: 101, Y: 21.350360749973287, Z: -5 },
          { X: 101, Y: 21.350360749973287, Z: 5 },
          { X: 101, Y: 42.700721499946575, Z: 5 },
          { X: 101, Y: 42.700721499946575, Z: -5 },
          { X: 101, Y: 42.700721499946575, Z: 5 },
          { X: 101, Y: 64.05108224991986, Z: 5 },
          { X: 101, Y: 64.05108224991986, Z: -5 },
          { X: 101, Y: 64.05108224991986, Z: 5 },
          { X: 101, Y: 85.40144299989315, Z: 5 },
          { X: 101, Y: 85.40144299989315, Z: -5 },
          { X: 101, Y: 85.40144299989315, Z: 5 },
          { X: 80.0638528123998, Y: 101, Z: 5 },
          { X: 80.0638528123998, Y: 101, Z: -5 },
          { X: 80.0638528123998, Y: 101, Z: 5 },
          { X: 58.71349206242651, Y: 101, Z: 5 },
          { X: 58.71349206242651, Y: 101, Z: -5 },
          { X: 58.71349206242651, Y: 101, Z: 5 },
          { X: 37.36313131245322, Y: 101, Z: 5 },
          { X: 37.36313131245322, Y: 101, Z: -5 },
          { X: 37.36313131245322, Y: 101, Z: 5 },
          { X: 16.012770562479933, Y: 101, Z: 5 },
          { X: 16.012770562479933, Y: 101, Z: -5 },
          { X: 16.012770562479933, Y: 101, Z: 5 },
          { X: -1, Y: 80.0638528123998, Z: 5 },
          { X: -1, Y: 80.0638528123998, Z: -5 },
          { X: -1, Y: 80.0638528123998, Z: 5 },
          { X: -1, Y: 58.71349206242651, Z: 5 },
          { X: -1, Y: 58.71349206242651, Z: -5 },
          { X: -1, Y: 58.71349206242651, Z: 5 },
          { X: -1, Y: 37.36313131245322, Z: 5 },
          { X: -1, Y: 37.36313131245322, Z: -5 },
          { X: -1, Y: 37.36313131245322, Z: 5 },
          { X: -1, Y: 16.012770562479933, Z: 5 },
          { X: -1, Y: 16.012770562479933, Z: -5 },
          { X: -1, Y: 16.012770562479933, Z: 5 },
          { X: 19.93614718760019, Y: -1, Z: 5 },
          { X: 19.93614718760019, Y: -1, Z: -5 },
          { X: 19.93614718760019, Y: -1, Z: 5 },
          { X: 41.286507937573475, Y: -1, Z: 5 },
          { X: 41.286507937573475, Y: -1, Z: -5 },
          { X: 41.286507937573475, Y: -1, Z: 5 },
          { X: 62.636868687546766, Y: -1, Z: 5 },
          { X: 62.636868687546766, Y: -1, Z: -5 },
          { X: 62.636868687546766, Y: -1, Z: 5 },
          { X: 83.98722943752006, Y: -1, Z: 5 },
          { X: 83.98722943752006, Y: -1, Z: -5 },
          { X: 83.98722943752006, Y: -1, Z: 5 },
        ]
      ],false));
  });
});
